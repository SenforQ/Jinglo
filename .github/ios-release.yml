name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products

      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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

          certificate-password: 111111
          
          provisioning-profile-base64: 


          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa

          
      # - name: Upload using iTMSTransporter
      #   env:
      #     WORKING_DIRECTORY: build/ios/ipa
      #     IPA_FILE_NAME: oiyo.ipa
      #     APPLE_USERNAME: Nina2000HH@outlook.com
      #     APPLE_PASSWORD: zeqo-kyio-mlkw-kbwf
      #     APPLE_ASC_PROVIDER: 798RL7J5U7
      #   run: |
      #     cd $WORKING_DIRECTORY
      #     git clone https://github.com/ZhangLi1984/itsm.git
      #     ./itsm/bin/iTMSTransporter -assetFile $IPA_FILE_NAME -u $APPLE_USERNAME -p $APPLE_PASSWORD -m upload -asc_provider $APPLE_ASC_PROVIDER -v verbose

      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/jinglo.ipa"
          APPLE_ID: "WarlikeHerman54761@outlook.com"
          APP_SPECIFIC_PASSWORD: "dzuw-qnrg-nubd-jkht"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
